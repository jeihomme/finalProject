<?xml version="1.0" encoding="UTF-8"?>

<!--  마이바티스 3 매퍼 Doctype -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!--  매퍼 설정 -->
<mapper namespace="web.dao.face.MypageDao">

	<select id="selectInfoByUserId"
	parameterType="web.dto.Member"
	resultType="web.dto.Member">
		select
			*
		from member
		where userId = #{userId }
	</select>
	
	<update id="updateInfo"
	parameterType="web.dto.Member">
		update member set email=#{email }, telcom=#{telcom }, contact=#{contact }
		where userId = #{userId }
	</update>
	
<!-- 	public void updateBandMember(List<BandMember> bandMember); -->
	<update id="updateBandMember"
	parameterType="web.dto.BandMember">
		update bandMember set
			bandMemName=#{bandMemName }
			, mPosition=#{mPosition }
		where bandNo = #{bandNo } and bandMemberNo = #{bandMemberNo }
	</update>

	<update id="updatePw"
	parameterType="web.dto.Member">
		update member set password=#{password }
		where userId = #{userId }
	</update>
	
	<select id="selectUserListCnt" resultType="int">
		select count(*) from member
	</select>

	<select id="selectCntAll" parameterType="String"
		resultType="int">
		select count(*) from member
		WHERE userId LIKE '%'||#{search }||'%'
	</select>
	
	<select id="selectUserList" parameterType="web.utils.Paging"
		resultType="web.dto.Member">
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		SELECT * FROM member
		ORDER BY userId DESC
		) B
		ORDER BY rnum
		)
		WHERE rnum between #{startNo } AND
		#{endNo }
	</select>
	
	<select id="selectUserByUserId" parameterType="web.utils.Paging"
		resultType="web.dto.Member">
		SELECT * FROM (
		 SELECT rownum rnum, B.* FROM (
		 	SELECT * FROM member
			WHERE userId LIKE '%'||#{search }||'%'
		 	ORDER BY userId DESC
		 ) B
		 ORDER BY rnum
		)
		WHERE rnum between #{startNo } AND
		#{endNo }
	</select>
	
	<delete id="deleteUser" parameterType="web.dto.Member">
		delete member
		where userId=#{userId }
	</delete>
	
	<select id="selectBoardList" parameterType="web.utils.Paging"
		resultType="web.dto.Resumes">
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		SELECT * FROM resumes
		ORDER BY resumesNo DESC
		) B
		ORDER BY rnum
		)
		WHERE rnum between #{startNo } AND
		#{endNo }
	</select>
	
	<select id="selectBoardByResumesNo" parameterType="web.utils.Paging"
		resultType="web.dto.Resumes">
		SELECT * FROM (
		 SELECT rownum rnum, B.* FROM (
		 	SELECT * FROM resumes
			WHERE resumesNo LIKE '%'||#{search }||'%'
		 	ORDER BY resumesNo DESC
		 ) B
		 ORDER BY rnum
		)
		WHERE rnum between #{startNo } AND
		#{endNo }
	</select>
	
	<delete id="deleteBoard" parameterType="web.dto.Resumes">
		delete resumes
		where resumesNo=#{resumesNo }
	</delete>
	
	<select id="selectBandByUserId" parameterType="web.dto.Band"
		resultType="web.dto.Band">
		select * from band
		where userId = #{userId }
	</select>
<!-- 	public List<BandMember>  selectBandMemberByBandName(BandMember bandMember); -->
	<select id="selectBandMemberByBandName" parameterType="web.dto.BandMember"
		resultType="web.dto.BandMember">
		select
			*
		from bandMember
		where bandNo = #{bandNo }
		order by bandMemberNo
	</select>
	
<!-- 	public void insertBandMemberList(BandMember bandMember); -->
	<insert id="insertBandMemberList" parameterType="web.dto.BandMember">
		<selectKey keyProperty="bandMemberNo" resultType="int" order="BEFORE">
<!-- 			select dept_seq.nextval from dual -->
			select * from (
			select NVL(max(bandMemberNo)+1, 1) from bandMember
			order by bandMemberNo desc
			)
			where rownum = 1
<!-- 			select max(no)+1 no from test_member -->
		</selectKey>
		insert into BandMember
			values(
			#{bandMemberNo }
			, ''
			, #{bandNo }
			, ''
			)
	</insert>
	
<!-- 	public void deleteBandMemberList(BandMember bandMember); -->
	<delete id="deleteBandMemberList" parameterType="web.dto.BandMember">
		delete BandMember
		where bandMemberNo = (
		select * from (
			select bandMemberNo from bandMember
			order by bandMemberNo desc
			)
			where rownum = 1
		)
	</delete>
	
<!-- 	public Resumes selectResumesByBandName(Resumes resumes); -->
	<select id="selectResumesByBandName" parameterType="web.dto.Resumes"
		resultType="web.dto.Resumes">
		select
			*
		from Resumes
		where bandNo = #{bandNo }
	</select>
<!-- 	public List<Resumes> selectResumesListByBandName(Resumes resumes); -->
	<select id="selectResumesListByBandName" parameterType="web.dto.Resumes"
		resultType="web.dto.Resumes">
		select
			*
		from Resumes
		where bandNo = #{bandNo }
		order by ResumesNo
	</select>
	
<!-- 	public List<Music> selectMusicListByBandName(Music music); -->
	<select id="selectMusicListByBandName" parameterType="web.dto.Music"
		resultType="web.dto.Music">
		select
			*
		from music
		where bandNo = #{bandNo }
		order by musicNo
	</select>


	<select id="barInfoBarno" parameterType="web.dto.Bar" 
		resultType="web.dto.Bar">
		select contact,barInfo,manager from bar where barNo=#{barNo}
		</select>
	
<!-- 	public void deleteResumesByResumesNo(Resumes resumes); -->
	<delete id="deleteResumesByResumesNo" parameterType="web.dto.Resumes">
		delete resumes
		where resumesNo=#{resumesNo }
	</delete>
<!-- 	public void deleteMusicByMusicNo(Music music); -->
	<delete id="deleteMusicByMusicNo" parameterType="web.dto.Music">
		delete music
		where musicNo=#{musicNo }
	</delete>
<!-- 	public Resumes selectResumesByResumesNo(Resumes resumes); -->
	<select id="selectResumesByResumesNo" parameterType="web.dto.Resumes"
		resultType="web.dto.Resumes">
		select
			*
		from Resumes
		where resumesNo = NVL( #{resumesNo }, 0 )
	</select>

<!-- public BandGenre selectBandGenreByBandNo(BandGenre bandGenre); -->
	<select id="selectBandGenreByBandNo" parameterType="web.dto.BandGenre"
		resultType="web.dto.BandGenre">
		select
			*
		from BandGenre
		where bandNo = #{bandNo } and resumesNo = #{resumesNo }
	</select>
<!-- 	public Genre selectGenreByGenreNo(Genre genre); -->
	<select id="selectGenreByGenreNo" parameterType="web.dto.Genre"
		resultType="web.dto.Genre">
		select
			*
		from Genre
		where genreNo = #{genreNo }
	</select>
	
<!-- 	public void updatePublicResumesByResumesNo(Resumes resumes); -->
	<update id="updatePublicResumesByResumesNo"
	parameterType="web.dto.Resumes">
		update resumes set publicResumes = #{publicResumes }
		where resumesNo = #{resumesNo }
	</update>
	
<!-- 	public Resumes insertResumesByBandName(Resumes resumes); -->
	<insert id="insertResumesByBandName" parameterType="web.dto.Resumes">
		<selectKey keyProperty="resumesNo" resultType="int" order="BEFORE">
			select * from (
        		select NVL(max(resumesNo)+1, 1) from resumes
                )
		</selectKey>
		insert into resumes(
			resumesNo
			, bandNo
			)
			values(
			#{resumesNo }
			, #{bandNo }
			)
	</insert>
<!-- public List<History> selectHistoryByBandName(Resumes resumes); -->
	<select id="selectHistoryByBandName" parameterType="web.dto.Resumes"
		resultType="web.dto.History">
		select h.* from resumes r, history h
		where
			r.resumesNo = h.resumesNo
			and r.bandNo=#{bandNo }
			and r.resumesNo=#{resumesNo }
		order by year
	</select>
<!-- 	public Music selectMusicByResumesNo(Resumes resumes); -->
	<select id="selectMusicByResumesNo" parameterType="web.dto.Resumes"
		resultType="web.dto.Music">
		select m.* from resumes r, Music m
		where
			r.musicNo = m.musicNo
			and r.resumesNo=#{resumesNo }
	</select>
<!-- 	public void insertSound(Music music); -->
	<insert id="insertSound" parameterType="web.dto.Music">
		<selectKey keyProperty="musicNo" resultType="int" order="BEFORE">
			select * from (
			select NVL(max(musicNo)+1, 1) from Music
			)
		</selectKey>
		insert into Music(
				musicNo
				, bandNo
				, musicTitle
				, path
				, writtenDate
			)
			values(
				#{musicNo }
				, #{bandNo }
				, #{musicTitle }
				, #{path }
				, sysdate
			)
	</insert>
<!-- 	public void deleteSoundByMusicNo(Music music); -->
	<delete id="deleteSoundByMusicNo" parameterType="web.dto.Music">
		delete Music
		where musicNo=#{musicNo }
	</delete>
<!-- 	public void updateResumesByMusicNo(Music music); -->
	<update id="updateResumesByMusicNo" parameterType="web.dto.Music">
		update resumes set musicNo=0
			where musicNo = #{musicNo }
	</update>
	
<!-- 	public void insertHistoryList(History history); -->
	<insert id="insertHistoryList" parameterType="web.dto.History">
		<selectKey keyProperty="historyNo" resultType="int" order="BEFORE">
<!-- 			select dept_seq.nextval from dual -->
			select * from (
			select NVL(max(historyNo)+1, 1) from History
			order by historyNo desc
			)
			where rownum = 1
<!-- 			select max(no)+1 no from test_member -->
		</selectKey>
		insert into History
			values(
			#{historyNo }
			, #{resumesNo }
			, 0
			, ''
			)
	</insert>
<!-- 	public void deleteHistoryList(History history); -->
	<delete id="deleteHistoryList" parameterType="web.dto.History">
		delete History
		where historyNo = (
			select * from (
				select historyNo from History
	            where resumesNo = #{resumesNo }
				order by historyNo desc
				)
			where rownum = 1
			)
	</delete>
	
<!-- 	public void updateResume(Resumes resumes); -->
	<update id="updateResume"
		parameterType="web.dto.Resumes">
			update resumes set
				resumesTitle=#{resumesTitle }
				, bandInfo=#{bandInfo }
				, musicNo=#{musicNo }
			where resumesNo = #{resumesNo }
		</update>
  
	<select id="barInfo" parameterType="web.dto.Bar" resultType="web.dto.Bar">
			select *
			from bar 
			where barno = #{barNo}
	</select>
<!-- 	public void updateHisotry(History history); -->
	<insert id="updateHisotry"
	parameterType="web.dto.History">
<!-- 		update history set -->
<!-- 			year=#{year } -->
<!-- 			, historyInfo=#{historyInfo } -->
<!-- 		where historyNo = #{historyNo } and resumesNo = #{resumesNo } -->

		<selectKey keyProperty="historyNoNo" resultType="int" order="BEFORE">
<!-- 			select dept_seq.nextval from dual -->
			select * from (
			select NVL(max(historyNo)+1, 1) from History
			order by historyNo desc
			)
			where rownum = 1
<!-- 			select max(no)+1 no from test_member -->
		</selectKey>
		
	merge into history
    using dual
        on ( historyNo = #{historyNo } )
            when matched then
                update set year=#{year }, historyInfo=#{historyInfo }
            when not matched then
                insert (historyNo, resumesNo, year, historyInfo)
                    values (#{historyNoNo }, #{resumesNo }, #{year }, #{historyInfo })
	</insert>
	
<!-- 	public void updateBandGenre(BandGenre bandGenre); -->
<update id="updateBandGenre"
	parameterType="web.dto.BandGenre">
		update bandGenre set
			genreNo=#{genreNo }
		where bandNo = #{bandNo } and resumesNo = #{resumesNo }
	</update>
</mapper>