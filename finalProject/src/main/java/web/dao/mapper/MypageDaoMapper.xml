<?xml version="1.0" encoding="UTF-8"?>

<!--  마이바티스 3 매퍼 Doctype -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!--  매퍼 설정 -->
<mapper namespace="web.dao.face.MypageDao">

	<select id="selectInfoByUserId"
	parameterType="web.dto.Member"
	resultType="web.dto.Member">
		select
			*
		from member
		where userId = #{userId }
	</select>
	
	<update id="updateInfo"
	parameterType="web.dto.Member">
		update member set email=#{email }, telcom=#{telcom }, contact=#{contact }
		where userId = #{userId }
	</update>
	
<!-- 	public void updateBandMember(List<BandMember> bandMember); -->
	<update id="updateBandMember"
	parameterType="web.dto.BandMember">
		update bandMember set
			bandMemName=#{bandMemName }
			, mPosition=#{mPosition }
		where bandNo = #{bandNo } and bandMemberNo = #{bandMemberNo }
	</update>

	<update id="updatePw"
	parameterType="web.dto.Member">
		update member set password=#{password }
		where userId = #{userId }
	</update>
	
	<select id="selectUserListCnt" resultType="int">
		select count(*) from member
		where roleId between 1 and 2
	</select>
<!-- 	public int selectAppListCntByBandNo(Band band); -->
	<select id="selectAppListCntByBandNo" parameterType="web.dto.Band" resultType="int">
		select count(*) from application a
		left outer join resumes r on a.resumesNo = r.resumesNo
		where r.bandNo = #{bandNo }
		order by appDate desc
	</select>
<!-- 	public int selectAppListCntByBandNo(Band band); -->
	<select id="selectAppListCntByBandNoAppliedBar" parameterType="web.dto.Band" resultType="int">
		select count(*) from application a
		left outer join resumes r on a.resumesNo = r.resumesNo
		where r.bandNo = #{bandNo } and applied=1
		order by appDate desc
	</select>
	<select id="selectAppListCntByBandNoAppliedBand" parameterType="web.dto.Band" resultType="int">
		select count(*) from application a
		left outer join resumes r on a.resumesNo = r.resumesNo
		where r.bandNo = #{bandNo } and applied=2
		order by appDate desc
	</select>

<!-- public int selectAppListCntByBarName(); -->
	<select id="selectAppListCntByBarName" parameterType="web.dto.Bar" resultType="int">
		select count(*) from application
		where barName = #{barName }
	</select>
<!-- public int selectAppListCntByBarName(); -->
	<select id="selectAppListCntByBarNameAppliedBar" parameterType="web.dto.Bar" resultType="int">
		select count(*) from application
		where barname = #{barName } and applied=1
	</select>
	<select id="selectAppListCntByBarNameAppliedBand" parameterType="web.dto.Bar" resultType="int">
		select count(*) from application
		where barname = #{barName } and applied=2
	</select>
	
	<select id="selectUserCntAll" parameterType="String"
		resultType="int">
		select count(*) from member
		WHERE
		<choose>
				<when test="category == 1">
					userId LIKE '%'||#{search }||'%'
				</when>
				
				<when test="category == 2">
					contact LIKE '%'||#{search }||'%'
				</when>
				
				<when test="category == 3">
					userName LIKE '%'||#{search }||'%'
				</when>
			</choose>
	</select>
	
	<select id="selectResumesCntAll" parameterType="String"
		resultType="int">
		select count(*) from resumes r
		left outer join band b on b.bandno = r.bandno
		WHERE
			<choose>
				<when test="category == 1">
					bandName LIKE '%'||#{search }||'%'
				</when>
				
				<when test="category == 2">
					resumesTitle LIKE '%'||#{search }||'%'
				</when>
			</choose>
	</select>
	
	<select id="selectUserList" parameterType="web.utils.Paging"
		resultType="web.dto.Member">
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		SELECT * FROM member
			where roleId between 1 and 2
		ORDER BY userId DESC
		) B
		ORDER BY rnum
		)
		WHERE rnum between #{startNo } AND
		#{endNo }
	</select>
	
	<select id="selectUserByUserId"
		resultType="web.dto.Member">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		 SELECT rownum rnum, B.* FROM (
		 	SELECT * FROM member
			WHERE
			<choose>
				<when test="category == 1">
					userId LIKE '%'||#{paging.search }||'%'
				</when>
				
				<when test="category == 2">
					contact LIKE '%'||#{paging.search }||'%'
				</when>
				
				<when test="category == 3">
					userName LIKE '%'||#{paging.search }||'%'
				</when>
			</choose>
		 	ORDER BY userId DESC
		 ) B
		 ORDER BY rnum
		)
		WHERE rnum between #{paging.startNo } AND
		#{paging.endNo }
	</select>
	
	<delete id="deleteUser" parameterType="web.dto.Member">
		delete member
		where userId=#{userId }
	</delete>
	
	<select id="selectBoardList" parameterType="web.utils.Paging"
		resultType="web.dto.Resumes">
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		SELECT * FROM resumes r
			left outer join band b on b.bandno = r.bandno
		ORDER BY resumesNo DESC
		) B
		ORDER BY rnum
		)
		WHERE rnum between #{startNo } AND
		#{endNo }
	</select>
	
	<select id="selectBoardByResumesNo"
		resultType="web.dto.Resumes">
<!-- 		 parameterType="web.utils.Paging" -->
		SELECT * FROM (
		 SELECT rownum rnum, B.* FROM (
		 	select * from resumes r
			left outer join band b on b.bandno = r.bandno
			WHERE
			<choose>
				<when test="category == 1">
					bandName LIKE '%'||#{paging.search }||'%'
				</when>
				
				<when test="category == 2">
					resumesTitle LIKE '%'||#{paging.search }||'%'
				</when>
			</choose>
		 	ORDER BY resumesNo DESC
		 ) B
		 ORDER BY rnum
		)
		WHERE rnum between #{paging.startNo } AND
		#{paging.endNo }
	</select>
	
	<delete id="deleteBoard" parameterType="web.dto.Resumes">
		delete resumes
		where resumesNo=#{resumesNo }
	</delete>
	
	<select id="selectBandByBandNo" parameterType="web.dto.Band"
		resultType="web.dto.Band">
		select * from band
		where bandno = #{bandNo }
	</select>
	
	<select id="selectBandByUserId" parameterType="web.dto.Band"
		resultType="web.dto.Band">
		select * from band
		where userId = #{userId }
	</select>
<!-- 	public List<BandMember>  selectBandMemberByBandName(BandMember bandMember); -->
	<select id="selectBandMemberByBandName" parameterType="web.dto.BandMember"
		resultType="web.dto.BandMember">
		select
			*
		from bandMember
		where bandNo = #{bandNo }
		order by bandMemberNo
	</select> 
	
<!-- 	public void insertBandMemberList(BandMember bandMember); -->
	<insert id="insertBandMemberList" parameterType="web.dto.BandMember">
		<selectKey keyProperty="bandMemberNo" resultType="int" order="BEFORE">
<!-- 			select dept_seq.nextval from dual -->
			select * from (
			select NVL(max(bandMemberNo)+1, 1) from bandMember
			order by bandMemberNo desc
			)
			where rownum = 1
<!-- 			select max(no)+1 no from test_member -->
		</selectKey>
		insert into BandMember
			values(
			#{bandMemberNo }
			, ''
			, ''
			, #{bandNo }
			)
	</insert>
	
<!-- public void deleteBandMemberList(@Param("bandMember")BandMember bandMember, @Param("rnum")int rnum); -->
	<delete id="deleteBandMemberList" >
<!-- 	parameterType="web.dto.BandMember" -->
		delete BandMember
			where bandMemberNo = (
			SELECT bandMemberNo FROM (
			    SELECT rownum rnum, Bm.* FROM (
				    select * from bandmember
				    where bandno = #{bandMember.bandNo }
				    order by bandMemberNo
				    ) Bm
				ORDER BY rnum )
				where rnum = #{rnum }
			)
	</delete>
	
<!-- 	public Resumes "selectResumesByBandNoWithPublic"(Resumes resumes); -->
	<select id="selectResumesByBandNoWithPublic" parameterType="web.dto.Resumes"
		resultType="web.dto.Resumes">
		select
			*
		from Resumes
		where
			bandNo = #{bandNo }
			and publicResumes = 1
	</select>
	
	<select id="selectResumesByBandNo" parameterType="web.dto.Resumes"
		resultType="web.dto.Resumes">
		select
			*
		from Resumes
		where bandNo = #{bandNo }
		order by resumesNo
	</select>
<!-- 	public List<Resumes> selectResumesListByBandName(Resumes resumes); -->
	<select id="selectResumesListByBandName" parameterType="web.dto.Resumes"
		resultType="web.dto.Resumes">
		select
			*
		from Resumes
		where bandNo = #{bandNo }
		order by ResumesNo
	</select>
	
<!-- 	public List<Music> selectMusicListByBandName(Music music); -->
	<select id="selectMusicListByBandName" parameterType="web.dto.Music"
		resultType="web.dto.Music">
		select
			*
		from music
		where bandNo = #{bandNo }
		order by musicNo
	</select>


	<select id="barInfoBarno" parameterType="web.dto.Bar" 
		resultType="web.dto.Bar">
		select contact,barInfo,manager from bar where barNo=#{barNo}
		</select>
	
<!-- 	public void deleteResumesByResumesNo(Resumes resumes); -->
	<delete id="deleteResumesByResumesNo" parameterType="web.dto.Resumes">
		delete resumes
		where resumesNo=#{resumesNo }
	</delete>
<!-- 	public void deleteMusicByMusicNo(Music music); -->
	<delete id="deleteMusicByMusicNo" parameterType="web.dto.Music">
		delete music
		where musicNo=#{musicNo }
	</delete>
<!-- 	public Resumes selectResumesByResumesNo(Resumes resumes); -->
	<select id="selectResumesByResumesNo" parameterType="web.dto.Resumes"
		resultType="web.dto.Resumes">
		select * from Resumes 
		where resumesNo = NVL( #{resumesNo }, 0 )
	</select>

<!-- public BandGenre selectBandGenreByBandNo(BandGenre bandGenre); -->
	<select id="selectBandGenreByBandNo" parameterType="web.dto.BandGenre"
		resultType="web.dto.BandGenre">
		select
			*
		from BandGenre
		where bandNo = #{bandNo } and resumesNo = #{resumesNo }
	</select>
<!-- 	public Genre selectGenreByGenreNo(Genre genre); -->
	<select id="selectGenreByGenreNo" parameterType="web.dto.Genre"
		resultType="web.dto.Genre">
		select
			*
		from Genre
		where genreNo = #{genreNo }
	</select>
	
<!-- 	public void updatePublicResumesByResumesNo(Resumes resumes); -->
	<update id="updatePublicResumesByResumesNo"
	parameterType="web.dto.Resumes">
		update resumes set publicResumes = 1
		where resumesNo = #{resumesNo }
	</update>
	
<!-- 	public Resumes insertResumesByBandNo(Resumes resumes); -->
	<insert id="insertResumesByBandNo" parameterType="web.dto.Resumes">
		<selectKey keyProperty="resumesNo" resultType="int" order="BEFORE">
			select * from (
        		select NVL(max(resumesNo)+1, 1) from resumes
                )
		</selectKey>
		insert into resumes(
			resumesNo
			, bandNo
			)
			values(
			#{resumesNo }
			, #{bandNo }
			)
	</insert>
<!-- public void insertBandGenreByBandNo(BandGenre bandGenre); -->
	<insert id="insertBandGenreByBandNo" parameterType="web.dto.BandGenre">
<!-- 		<selectKey keyProperty="resumesNo" resultType="int" order="BEFORE"> -->
<!-- 			select * from ( -->
<!--         		select NVL(max(resumesNo)+1, 1) from resumes -->
<!--                 ) -->
<!-- 		</selectKey> -->
<!-- 		bandGenre.setBandNo(band.getBandNo()); -->
<!-- 			bandGenre.setResumesNo(resumes.getResumesNo()); -->
		insert into BandGenre(
			bandNo
			, genreNo
			, resumesNo
			)
			values(
			#{bandNo }
			, 1
			, #{resumesNo }
			)
	</insert>
<!-- public List<History> selectHistoryByBandNo(Resumes resumes); -->
	<select id="selectHistoryByBandNo" parameterType="web.dto.Resumes"
		resultType="web.dto.History">
		select h.* from resumes r, history h
		where
			r.resumesNo = h.resumesNo
			and r.bandNo=#{bandNo }
			and r.resumesNo=#{resumesNo }
		order by year
	</select>
<!-- 	public Music selectMusicByResumesNo(Resumes resumes); -->
	<select id="selectMusicByResumesNo" parameterType="web.dto.Resumes"
		resultType="web.dto.Music">
		select m.* from resumes r, Music m
		where
			r.musicNo = m.musicNo
			and r.resumesNo=#{resumesNo }
	</select>
<!-- 	public void insertSound(Music music); -->
	<insert id="insertSound" parameterType="web.dto.Music">
		<selectKey keyProperty="musicNo" resultType="int" order="BEFORE">
			select * from (
			select NVL(max(musicNo)+1, 1) from Music
			)
		</selectKey>
		insert into Music(
				musicNo
				, bandNo
				, musicTitle
				, path
				, writtenDate
			)
			values(
				#{musicNo }
				, #{bandNo }
				, #{musicTitle }
				, #{path }
				, sysdate
			)
	</insert>
<!-- 	public void deleteSoundByMusicNo(Music music); -->
	<delete id="deleteSoundByMusicNo" parameterType="web.dto.Music">
		delete Music
		where musicNo=#{musicNo }
	</delete>
<!-- 	public void updateResumesByMusicNo(Music music); -->
	<update id="updateResumesByMusicNo" parameterType="web.dto.Music">
		update resumes set musicNo=0
			where musicNo = #{musicNo }
	</update>
	
<!-- 	public void insertHistoryList(History history); -->
	<insert id="insertHistoryList" parameterType="web.dto.History">
		<selectKey keyProperty="historyNo" resultType="int" order="BEFORE">
<!-- 			select dept_seq.nextval from dual -->
			select * from (
			select NVL(max(historyNo)+1, 1) from History
			order by historyNo desc
			)
			where rownum = 1
<!-- 			select max(no)+1 no from test_member -->
		</selectKey>
		insert into History
			values(
			#{historyNo }
			, #{resumesNo }
			, 0
			, ''
			)
	</insert>
<!-- public void deleteHistoryList(History history, int rnum); -->
	<delete id="deleteHistoryList" >
<!-- 	parameterType="web.dto.History" -->
<!-- 		delete History -->
<!-- 		where historyNo = ( -->
<!-- 			select * from ( -->
<!-- 				select historyNo from History -->
<!-- 	            where resumesNo = #{resumesNo } -->
<!-- 				order by historyNo desc -->
<!-- 				) -->
<!-- 			where rownum = 1 -->
<!-- 			) -->
		delete History
			where historyNo = (
			SELECT historyNo FROM (
			    SELECT rownum rnum, his.* FROM (
				    select historyNo from History
				    where resumesNo = #{history.resumesNo }
				    order by year
				    ) his
				ORDER BY rnum )
				where rnum = #{rnum }
			)
	</delete>
	
<!-- 	public void updateResume(Resumes resumes); -->
	<update id="updateResume"
		parameterType="web.dto.Resumes">
			update resumes set
				resumesTitle=#{resumesTitle }
				, bandInfo=#{bandInfo }
				, musicNo=#{musicNo }
			where resumesNo = #{resumesNo }
		</update>
  
	<select id="barInfo" parameterType="web.dto.Bar" resultType="web.dto.Bar">
			select *
			from bar 
			where barno = #{barNo}
	</select>
<!-- 	public void updateHisotry(History history); -->
	<insert id="updateHisotry"
	parameterType="web.dto.History">
		update history set
			year=#{year }
			, historyInfo=#{historyInfo }
		where historyNo = #{historyNo } and resumesNo = #{resumesNo }
	</insert>
	
<!-- 	public void updateBandGenre(BandGenre bandGenre); -->
	<update id="updateBandGenre"
		parameterType="web.dto.BandGenre">
			update bandGenre set
				genreNo=#{genreNo }
			where bandNo = #{bandNo } and resumesNo = #{resumesNo }
	</update>
		
<!-- 		public int selectBarListCnt(); -->
	<select id="selectBarListCnt" resultType="int">
		select count(*) from bar
		order by barno
	</select>
<!-- public List<Bar> selectBarList(BandGenre bandGenre, ProfilePic profilePic); -->

	<select id="selectBarList"
		resultType="web.dto.Bar">
		<!-- 		parameterType="web.dto.BandGenre" -->
		
		SELECT B.*, P.PATH, P.ORIGINNAME, P.STOREDNAME
			FROM BAR B
			LEFT OUTER JOIN PROFILEPIC P ON B.PROFILENO = P.PROFILENO
			where B.GENRENO = #{bandGenre.genreNo }
			ORDER BY DBMS_RANDOM.RANDOM
		
	</select>

<!-- public List<Application> selectApplicationList(Paging paging); -->
	<select id="selectApplicationList"
		resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
			SELECT rownum rnum, B.* FROM (
				SELECT * FROM Application
				where barName= ( select barName from bar where userid=#{member.userId } )
				ORDER BY appno DESC
				) B
			ORDER BY rnum
		)
		WHERE rnum between #{paging.startNo } AND
		#{paging.endNo }
	</select>
<!-- 	public int selectAppDateSearchCntByBarName(Date startDate, Date endDate); -->
	<select id="selectAppDateSearchCntByBarNameAppliedBar"
		resultType="int">
<!-- 		parameterType="String" -->
		select count(*) from Application
		WHERE barName=#{bar.barName } and applied = 1
			and appDate between #{startDate } and #{endDate }
	</select>
	<select id="selectAppDateSearchCntByBandNoAppliedBar"
		resultType="int">
<!-- 		parameterType="String" -->
<!-- 		select count(*) from Application -->
<!-- 		WHERE bandNo=#{band.bandNo } and applied = 1 -->
		
		select count(*) from application a
			left outer join resumes r on a.resumesNo = r.resumesNo
			where r.bandNo = #{band.bandNo } and applied=1 and appDate between #{startDate } and #{endDate }
			order by appDate desc
			
	</select>
	<select id="selectAppDateSearchCntByBarNameAppliedBand"
		resultType="int">
<!-- 		parameterType="String" -->
		select count(*) from Application
		WHERE barName=#{bar.barName } and applied = 2
			and appDate between #{startDate } and #{endDate }
	</select>
	<select id="selectAppDateSearchCntByBandNoAppliedBand"
		resultType="int">
<!-- 		parameterType="String" -->
<!-- 		select count(*) from Application -->
<!-- 		WHERE bandNo=#{band.bandNo } and applied = 2 -->
<!-- 			and appDate between #{startDate } and #{endDate } -->
			
		select count(*) from application a
			left outer join resumes r on a.resumesNo = r.resumesNo
			where r.bandNo = #{band.bandNo } and applied=2 and appDate between #{startDate } and #{endDate }
			order by appDate desc
	</select>
<!-- public List<Application> selectApplicationSearchListByBarNameAppliedBand(@Param("paging")Paging paging, @Param("member")Member member, @Param("startDate")String startDate, @Param("endDate")String endDate); -->
	<select id="selectApplicationSearchListByBarNameAppliedBand" 
		resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		SELECT * FROM Application
			where appDate between #{startDate } and #{endDate }
				and barName=#{bar.barName } and applied=2
		ORDER BY appno DESC
		) B
		ORDER BY appno
		)
		WHERE
			rnum between #{paging.startNo } AND #{paging.endNo }
	</select>
	
	<select id="selectApplicationSearchListByBarNameAppliedBar" 
		resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		SELECT * FROM Application
			where appDate between #{startDate } and #{endDate }
				and barName=#{bar.barName } and applied=1
		ORDER BY appno DESC
		) B
		ORDER BY appno
		)
		WHERE
			rnum between #{paging.startNo } AND #{paging.endNo }
	</select>
<!-- 	public void deleteAppByAppNo(Application app); -->
	<delete id="deleteAppByAppNo" parameterType="web.dto.Application">
		delete Application
		where appNo = #{appNo }
	</delete>
<!-- 	public Bar selectBarByUserId(Bar bar); -->
	<select id="selectBarByUserId" parameterType="web.dto.Bar"
		resultType="web.dto.Bar">
		select * from Bar
		where userId = #{userId }
	</select>
<!-- 	public Location selectLocationByLocationNo(Location location); -->
	<select id="selectLocationByLocationNo" parameterType="web.dto.Location"
		resultType="web.dto.Location">
		select * from Location
		where locationNo = #{locationNo }
	</select>
	
<!-- 	public ProfilePic selectProfilePicByProfilePicNo(ProfilePic pPic); -->
	<select id="selectProfilePicByProfilePicNo" parameterType="web.dto.ProfilePic"
		resultType="web.dto.ProfilePic">
		select * from ProfilePic
		where profileNo = #{profileNo }
	</select>
	
<!-- 	public Bar updateBar(Bar bar); -->
	<update id="updateBar"
		parameterType="web.dto.Bar">
			update Bar set
			locationNo=#{locationNo }
			, barAddress=#{barAddress }
			, barInfo=#{barInfo }
			, genreNo=#{genreNo }
			where barNo = #{barNo }
	</update>
	
<!-- 	public void updateReadByAppNo(Application app); -->
	<update id="updateReadByAppNo"
		parameterType="web.dto.Application">
			update Application set read=1
			where appNo = #{appNo }
	</update>
<!-- 	public void updateAcceptByAppNo(Application app); -->
	<update id="updateAcceptByAppNo"
		parameterType="web.dto.Application">
			update Application set accept=#{accept }
			where appNo = #{appNo }
	</update>
	
<!-- 	public void deleteBandGenre(Resumes resumes); -->
<delete id="deleteBandGenre" parameterType="web.dto.Resumes">
		delete BandGenre
		where resumesNo=#{resumesNo }
	</delete>
<!-- 	public void updatePublicResumes(Band band); -->
	<update id="updatePublicResumes"
		parameterType="web.dto.Band">
			update Resumes set publicResumes= 0
			where bandNo = #{bandNo }
	</update>
<!-- 	public void updateProfilePic(ProfilePic pPic); -->
	<update id="updateProfilePic" parameterType="web.dto.ProfilePic">
		update ProfilePic set path= #{path }, originName= #{originName }, storedName= #{storedName }
			where profileNo=#{profileNo }
		
	</update>
<!-- 	public void insertProfileNoByBand(Band band); -->
	<update id="insertProfileNoByBand" parameterType="web.dto.Band">
		insert into profilePic
		values(#{profileNo }, null, null, null)
		
	</update>
<!-- 	public void insertProfileNoByBar(Bar bar); -->
	<update id="insertProfileNoByBar" parameterType="web.dto.Bar">
		insert into profilePic
		values(#{profileNo }, null, null, null)
		
	</update>
	
<!-- 	public void insertBarProfileNo(Bar bar); -->
	<update id="insertBarProfileNo"
		parameterType="web.dto.Bar">
			insert into Bar
			values(
				profileNo= (select * from (
				select NVL(max(profileNo)+1, 1) from ProfilePic
				order by profileNo desc
				)
				where rownum = 1)
				)
			where barNo = #{barNo }
	</update>
<!-- 	public void insertBandProfileNo(Band band); -->
	<update id="updateBandProfileNo"
		parameterType="web.dto.Band">
		<selectKey keyProperty="profileNo" resultType="int" order="BEFORE">
<!-- 			select dept_seq.nextval from dual -->
			select * from (
			select NVL(max(profileNo)+1, 1) from ProfilePic
			order by profileNo desc
			)
			where rownum = 1
<!-- 			select max(no)+1 no from test_member -->
		</selectKey>
			update Band set profileNo=#{profileNo }
			where bandNo = #{bandNo }
	</update>
<!-- 	public List<Application> selectAppListByBandNoAppliedBar(@Param("paging")Paging paging, @Param("band")Band band); -->
	<select id="selectAppListByBandNoAppliedBar" resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		    SELECT rownum rnum, A.* FROM (
		        select * from application a
		        left outer join resumes r on a.resumesNo = r.resumesNo
		        where r.bandNo = #{band.bandNo } and applied=1
		    order by appDate desc
		    ) A
		    order by rnum
		    ) WHERE rnum between #{paging.startNo } AND #{paging.endNo }

	</select>
	<select id="selectAppListByBandNoAppliedBand" resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		    SELECT rownum rnum, A.* FROM (
		        select * from application a
		        left outer join resumes r on a.resumesNo = r.resumesNo
		        where r.bandNo = #{band.bandNo } and applied=2
		    order by appDate desc
		    ) A
		    order by rnum
		    ) WHERE rnum between #{paging.startNo } AND #{paging.endNo }

	</select>
<!-- 	public int selectResumesListCnt(); -->
	<select id="selectResumesListCnt" resultType="int">
	<!-- 		parameterType="web.utils.Paging" -->
		select count(*) from resumes
		where resumesNo is not null
	</select>
<!-- 	public List<Application> selectAppListByBarNameAppliedBand(@Param("paging")Paging paging, @Param("bar")Bar bar); -->
	<select id="selectAppListByBarNameAppliedBand" resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		    SELECT rownum rnum, A.* FROM (
		        select * from application 
		        where barName = #{bar.barName } and applied=2
		    order by appDate desc
		    ) A
		    order by rnum
		    ) WHERE rnum between #{paging.startNo } AND #{paging.endNo }
	</select>
	<select id="selectAppListByBarNameAppliedBar" resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		    SELECT rownum rnum, A.* FROM (
		        select * from application 
		        where barName = #{bar.barName } and applied=1
		    order by appDate desc
		    ) A
		    order by rnum
		    ) WHERE rnum between #{paging.startNo } AND #{paging.endNo }
	</select>
<!-- 	public List<Application> selectApplicationSearchListByBandNo(@Param("paging")Paging paging, @Param("band")Band band, @Param("startDate")String startDate, @Param("endDate")String endDate); -->
	<select id="selectApplicationSearchListByBandNoAppliedBar" 
		resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		
<!-- 		SELECT * FROM Application -->
<!-- 			where appDate between #{startDate } and #{endDate } -->
<!-- 				and bandNo=#{band.bandNo } and applied=1 -->
<!-- 		ORDER BY appDate desc -->
		
		select * from application a
			left outer join resumes r on a.resumesNo = r.resumesNo
			where r.bandNo = #{band.bandNo } and applied=1 and appDate between #{startDate } and #{endDate }
			order by appDate desc
			
		) B
		ORDER BY appDate desc
		)
		WHERE
			rnum between #{paging.startNo } AND #{paging.endNo }
	</select>
	<select id="selectApplicationSearchListByBandNoAppliedBand" 
		resultType="web.dto.Application">
<!-- 		parameterType="web.utils.Paging" -->
		SELECT * FROM (
		SELECT rownum rnum, B.* FROM (
		
<!-- 		SELECT * FROM Application -->
<!-- 			where appDate between #{startDate } and #{endDate } -->
<!-- 				and bandNo=#{band.bandNo } and applied=2 -->
<!-- 		ORDER BY appno DESC -->
		
		select * from application a
			left outer join resumes r on a.resumesNo = r.resumesNo
			where r.bandNo = #{band.bandNo } and applied=2 and appDate between #{startDate } and #{endDate }
			order by appDate desc

		) B
		ORDER BY appDate desc
		)
		WHERE
			rnum between #{paging.startNo } AND #{paging.endNo }
	</select>
<!-- public List scheduleBybarNo(@Param("map")Map map, @Param("barNo")int barNo); -->
	<select id="scheduleBybarNo" resultType="web.dto.CalendarD" >
	<!-- 	parameterType="Map"  -->
		Select
    		calendarNO,
    		EXTRACT(DAY FROM calendarDate) calendarDate,
		    a.bandNo,
    		CASE WHEN a.bandNo = b.bandNo THEN bandName
        		END bandName,
    		a.barNo,
    		CASE WHEN a.barNo = c.barNo THEN barName
        		END barName,
    		startTime,
    		endTime
		from calendar a, band b, bar c
		where a.bandNo = b.bandNo AND
    		a.barNo = c.barNo AND
    		a.barNo = #{barNo } AND
            calendarDate BETWEEN 
				to_date(#{map.firstDayOfMonth }, 'DD-MM-YY')
			AND 
				to_date(#{map.firstDayOfNextMonth }, 'DD-MM-YY')
		ORDER BY startTime
	</select>
<!-- 	public List scheduleBybandNo(@Param("map")Map map, @Param("bandNo")int bandNo); -->
	<select id="scheduleBybandNo" resultType="web.dto.CalendarD" >
<!-- 	parameterType="Map"  -->
		Select
    		calendarNO,
    		EXTRACT(DAY FROM calendarDate) calendarDate,
		    a.bandNo,
    		CASE WHEN a.bandNo = b.bandNo THEN bandName
        		END bandName,
    		a.barNo,
    		CASE WHEN a.barNo = c.barNo THEN barName
        		END barName,
    		startTime,
    		endTime
		from calendar a, band b, bar c
		where a.bandNo = b.bandNo AND
    		a.barNo = c.barNo AND
    		a.bandNo = #{bandNo } AND
            calendarDate BETWEEN 
				to_date(#{map.firstDayOfMonth }, 'DD-MM-YY')
			AND 
				to_date(#{map.firstDayOfNextMonth }, 'DD-MM-YY')
		ORDER BY startTime
	</select>
	
<!-- 	public Application selectAppByAppNo(Application app); -->
	<select id="selectAppByAppNo" parameterType="web.dto.Application" resultType="web.dto.Application" >
<!-- 	parameterType="Map"  -->
		select * from application
			where appNo = #{appNo }
	</select>
	
<!-- 	public void updateCalendarByBandNo(CalendarD cal); -->
	<update id="updateCalendarByBandNo"
		parameterType="web.dto.CalendarD">
			update calendar set bandNo=#{bandNo }
			where calendarNo = #{calendarNo }
	</update>
<!-- 	public Bar selectBarByBarName(Bar bar); -->
	<select id="selectBarByBarName" parameterType="web.dto.Bar" resultType="web.dto.Bar" >
<!-- 	parameterType="Map"  -->
		select * from bar
			where barName = #{barName }
	</select>
<!-- 	public void updateCalendarByBarNo(CalendarD cal); -->
	<update id="updateCalendarByBarNo"
		parameterType="web.dto.CalendarD">
			update calendar set barNo=#{barNo }
			where calendarNo = #{calendarNo }
	</update>
<!-- 	public CalendarD selectCalendarByCalendarNo(CalendarD cal); -->
	<select id="selectCalendarByCalendarNo" parameterType="web.dto.CalendarD" resultType="web.dto.CalendarD" >
	<!-- 	parameterType="Map"  -->
		select * from calendar
			where calendarNo = #{calendarNo }
	</select>
<!-- 	public PTime selectPTimeByTimeId(PTime startTime); -->
	<select id="selectPTimeByTimeId" parameterType="web.dto.PTime" resultType="web.dto.PTime" >
	<!-- 	parameterType="Map"  -->
		select * from pTime
			where timeId = #{timeId }
	</select>
</mapper>